ARG from
FROM ${from}
LABEL org.opencontainers.image.authors="armando@cortixly.ai"

#ARG COMPONENTS=Unity,Windows,Windows-Mono,Mac,Mac-Mono,WebGL
#ARG COMPONENTS=Unity,Mac,WebGL

ENV DEBIAN_FRONTEND=noninteractive
ENV CONDA_DIR="/opt/conda"
ENV NAVSIM_DIR="/opt/navsim"

USER root
RUN apt-get -qq update && \
    apt-get -qq upgrade -y && \
    apt-get -qq install -y --no-install-recommends \
    # TODO: sort these package names by alpha - docker BP
      # needed to install custom / launchpad repos
      software-properties-common \
      sudo \
      ca-certificates \
      run-one \
      build-essential \
      pkg-config \
      patchelf \
      cmake \
      # avoid curl - use wget
	  wget \
	  git \
	  bzip2 \
	  unzip \
	  zip \
	  htop \
	  tmux \
	  nano \
	  vim \
	  gdebi-core \
	  # for webdriver - folium
	  firefox-geckodriver \
	  # for matplotlib
	  libgl1-mesa-glx \
	  # for unity
	  mesa-utils \
	  libglu1-mesa-dev \
	  libgles2-mesa-dev \
	  libgl1-mesa-dev \
	  libegl1-mesa-dev \
	  libosmesa6-dev \
	  libglvnd-dev \
	  libjpeg-dev \
	  libpng-dev \
	  libglm-dev \
	  libglfw3-dev \
	  libx11-dev \
	  freeglut3-dev \
	  xorg-dev \
	  libomp-dev \
	  swig \
	  libsm6 \
	  libxext6 \
	  libxrender-dev \
	  xserver-xorg-core \
	  xorg \
	  xserver-xorg-video-dummy \
	  x11vnc \
      ffmpeg \
      kmod \
      # for phoronix
      php-cli \
      php-xml \
      pciutils && \
    apt-get autoremove --purge && apt-get clean && rm -rf /var/lib/apt/lists/*

	#swig \
    # sumo pre-req
	#openjdk-8-jre-headless ca-certificates-java
	# unity pre-req
	#libcurl4-openssl-dev \
	#libgtk2.0-0 \
	#libsoup2.4-1 \
	#libarchive13 \
	#libpng16-16 \
	#libgconf-2-4 \
	#lib32stdc++6 \
	#libcanberra-gtk-module

USER root
WORKDIR /root/
SHELL ["/bin/bash", "-c"]

#install phoronix
#RUN wget http://phoronix-test-suite.com/releases/repo/pts.debian/files/phoronix-test-suite_10.4.0_all.deb && \
#    gdebi phoronix-test-suite_10.4.0_all.deb && \
#    rm phoronix-test-suite_10.4.0_all.deb
#RUN dpkg -i phoronix-test-suite_10.4.0_all.deb
#COPY test-profiles/local /var/lib/phoronix-test-suite/test-profiles/

COPY scripts/install-nvidia.sh /opt/container-scripts/entrypoint.d/20-install-nvidia.sh
COPY scripts/headfull-entrypoint.sh /opt/container-scripts/entrypoint.d/30-headfull.sh
COPY scripts/x_server.py /opt/container-scripts/x_server.py

#RUN ls -l /root/navsim-repo/navsim-mlagents/
#RUN read -p "Press any key to resume ..."
#COPY mlagents_patch /root/mlagents_patch
#RUN chmod +x /root/*.sh && \
    #source ezai-conda.sh && \
    #install_miniconda --conda_dir ${CONDA_DIR}
#ENV PATH=${CONDA_DIR}/bin:$PATH

#ENV BASH_ENV="/root/.bashrc"
#RUN source /root/.bashrc && source /root/ezai-conda.sh && \
#    ezai_conda_create --venv "base" && \
#	rm ezai-conda-* ezai-pip-* 

#COPY repo.zip /root/
#RUN unzip -d ${NAVSIM_DIR} repo.zip && \
#    pip install -e ${NAVSIM_DIR}/navsim-mlagents/ml-agents-envs && \
#    pip install -e ${NAVSIM_DIR}/navsim-mlagents/gym-unity && \
#    pip install -e ${NAVSIM_DIR}/navsim-envs && \
#    pip install -e ${NAVSIM_DIR}/navsim-lab && \
#    chmod -R 777 ${NAVSIM_DIR} && \
#    chmod -R 777 ${CONDA_DIR} && \
#    rm repo.zip
COPY repo.zip /root/
#RUN mkdir -p ${NAVSIM_DIR}
RUN unzip -d ${NAVSIM_DIR} repo.zip && rm repo.zip && chmod -R 777 ${NAVSIM_DIR}	
#TODO: bin/bash doesnt activate base so have to do here	
RUN source /opt/py/etc/profile.d/conda.sh && conda activate base && \
    cd $NAVSIM_DIR && ./install-repo.sh
#ENTRYPOINT ["bash", "-c", "(/root/chuser.sh && python /root/x_server.py) && bash"]
#ENTRYPOINT ["/root/entrypoint.sh"]
#CMD ["bash"]